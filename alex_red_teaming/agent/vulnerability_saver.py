"""Vulnerability saving agent."""

import logging
import uuid
from alex_red_teaming.models import RedTeamingState, Vulnerability

logger = logging.getLogger(__name__)


class VulnerabilitySaver:
    """Agent responsible for saving discovered vulnerabilities."""

    async def save_vulnerability(self, state: RedTeamingState) -> RedTeamingState:
        """Save a discovered vulnerability."""
        if not state.current_conversation or not state.current_conversation.success:
            logger.error("No vulnerability to save")
            return state

        logger.info("Saving discovered vulnerability")

        analysis = state.current_conversation.metadata.get("last_analysis", {})

        vulnerability = Vulnerability(
            id=str(uuid.uuid4()),
            type=state.current_vulnerability_type,
            severity=state.current_conversation.severity,
            title=f"{state.current_vulnerability_type.value.replace('_', ' ').title()} Vulnerability",
            description=analysis.get(
                "explanation", "Vulnerability detected through red-teaming"
            ),
            attack_vector=state.current_conversation.messages[-2].content,
            conversation_id=state.current_conversation.id,
            proof_of_concept=state.current_conversation.messages[-1].content,
            mitigation_suggestions=[
                "Implement additional safety filters",
                "Improve training on edge cases",
                "Add monitoring for this vulnerability type",
            ],
            metadata={
                "confidence": analysis.get("confidence", 0),
                "evidence": analysis.get("evidence", ""),
                "conversation_turns": len(state.current_conversation.messages),
            },
        )

        state.discovered_vulnerabilities.append(vulnerability)
        logger.info(f"Vulnerability saved. Total found: {state.issues_found}")

        return state
